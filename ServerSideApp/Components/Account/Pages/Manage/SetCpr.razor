@page "/Account/Manage/CPR"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ServerSideApp.Data
@using Models

@* hvis bruger ikke er authenticated kan siden ikke tilgås *@
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Policy = "AuthenticatedUser")]

@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject Models.ToDoDbContext _toDoContext
@inject Services.HashingService _hashingHandler


<PageTitle>CPR</PageTitle>
<EditForm Model="Input" FormName="set-cpr" OnValidSubmit="SubmitCpr" method="post">
    <div class="row">
        <h2>Indtast CPR-nummer</h2>
        <div class="form-floating mb-3" style="width:200px">
            <InputText type="text" placeholder="xxxxxx-xxxx" style="width:200px" @bind-Value="Input.userCpr" />
            <hr />
            <button type="submit" class="w-100 btn btn-lg btn-primary">Submit</button>
        </div>
    </div>
</EditForm>


<AuthorizeView>
    <Authorized>
        @* sektion kan kun ses hvis bruger er authorized *@
    </Authorized>
    <NotAuthorized>
        @* sektion kan ses selvom bruger ikke er authorized *@
    </NotAuthorized>
</AuthorizeView>






@code {
    private ApplicationUser user = default!;
    private string? _currentUser;
    // private string? _userCpr;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _currentUser = user.ToString();


        // if (_toDoContext.Cprs.FirstOrDefault(a => a.User == _currentUser) == null)
        // {
        //     Input.userCpr = "";
        // }
        // else
        // {
        //     Input.userCpr = _toDoContext.Cprs.FirstOrDefault(a => a.User == _currentUser).CprNr;
        // }

        base.OnInitialized();
    }



    private void SubmitCpr()
    {

        // if input changed - try send
        if (Input.userCpr != "")
        {
            // opretter cpr objekt gennem model og tilføjer værdier ud fra input
            var cpr = new Models.Cpr
                {
                    User = user.UserName,
                    CprNr = Input.userCpr
                };

            _toDoContext.Cprs.Update(cpr);
            _toDoContext.SaveChanges();
        }

    }


    private sealed class InputModel
    {
        [Required]
        [StringLength(10, ErrorMessage = "Error", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Cpr")]
        public string? userCpr { get; set; }
    }
}